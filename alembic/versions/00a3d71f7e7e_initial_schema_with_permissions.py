"""Initial schema with permissions

Revision ID: 00a3d71f7e7e
Revises: 
Create Date: 2025-09-16 19:20:31.523473

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import app.db.models


# revision identifiers, used by Alembic.
revision: str = '00a3d71f7e7e'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('models',
    sa.Column('id', app.db.models.GUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('plugin_name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('max_tokens', sa.Integer(), nullable=True),
    sa.Column('supports_streaming', sa.Boolean(), nullable=True),
    sa.Column('supports_functions', sa.Boolean(), nullable=True),
    sa.Column('input_cost_per_1k', sa.Float(), nullable=True),
    sa.Column('output_cost_per_1k', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_models_name'), 'models', ['name'], unique=True)
    op.create_table('oauth2_authorization_codes',
    sa.Column('id', app.db.models.GUID(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('oauth2_tokens',
    sa.Column('id', app.db.models.GUID(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('permissions',
    sa.Column('id', app.db.models.GUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_permissions_name'), 'permissions', ['name'], unique=True)
    op.create_table('users',
    sa.Column('id', app.db.models.GUID(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('hashed_password', sa.String(length=100), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('api_keys',
    sa.Column('id', app.db.models.GUID(), nullable=False),
    sa.Column('key', sa.String(length=64), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('user_id', app.db.models.GUID(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('rate_limit', sa.Integer(), nullable=True),
    sa.Column('rate_limit_period', sa.Integer(), nullable=True),
    sa.Column('total_requests', sa.Integer(), nullable=True),
    sa.Column('total_tokens', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_used_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_api_keys_key'), 'api_keys', ['key'], unique=True)
    op.create_table('credentials',
    sa.Column('id', app.db.models.GUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.Column('plugin_name', sa.String(length=50), nullable=False),
    sa.Column('user_id', app.db.models.GUID(), nullable=False),
    sa.Column('encrypted_data', sa.Text(), nullable=False),
    sa.Column('metadata', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'plugin_name', 'user_id', name='_credential_unique')
    )
    op.create_table('refresh_tokens',
    sa.Column('id', app.db.models.GUID(), nullable=False),
    sa.Column('token_hash', sa.String(length=255), nullable=False),
    sa.Column('user_id', app.db.models.GUID(), nullable=False),
    sa.Column('user_agent', sa.String(length=255), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_refresh_tokens_token_hash'), 'refresh_tokens', ['token_hash'], unique=True)
    op.create_table('user_permissions',
    sa.Column('user_id', app.db.models.GUID(), nullable=False),
    sa.Column('permission_id', app.db.models.GUID(), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'permission_id')
    )
    op.create_table('api_key_models',
    sa.Column('api_key_id', app.db.models.GUID(), nullable=True),
    sa.Column('model_id', app.db.models.GUID(), nullable=True),
    sa.ForeignKeyConstraint(['api_key_id'], ['api_keys.id'], ),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], )
    )
    op.create_table('usage_logs',
    sa.Column('id', app.db.models.GUID(), nullable=False),
    sa.Column('api_key_id', app.db.models.GUID(), nullable=False),
    sa.Column('model_name', sa.String(length=100), nullable=False),
    sa.Column('request_id', sa.String(length=100), nullable=False),
    sa.Column('input_tokens', sa.Integer(), nullable=True),
    sa.Column('output_tokens', sa.Integer(), nullable=True),
    sa.Column('total_tokens', sa.Integer(), nullable=True),
    sa.Column('latency_ms', sa.Integer(), nullable=True),
    sa.Column('status_code', sa.Integer(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['api_key_id'], ['api_keys.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('request_id')
    )
    op.create_index('idx_usage_logs_api_key_created', 'usage_logs', ['api_key_id', 'created_at'], unique=False)
    op.create_index('idx_usage_logs_created_at', 'usage_logs', ['created_at'], unique=False)
    op.create_index(op.f('ix_usage_logs_created_at'), 'usage_logs', ['created_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_usage_logs_created_at'), table_name='usage_logs')
    op.drop_index('idx_usage_logs_created_at', table_name='usage_logs')
    op.drop_index('idx_usage_logs_api_key_created', table_name='usage_logs')
    op.drop_table('usage_logs')
    op.drop_table('api_key_models')
    op.drop_table('user_permissions')
    op.drop_index(op.f('ix_refresh_tokens_token_hash'), table_name='refresh_tokens')
    op.drop_table('refresh_tokens')
    op.drop_table('credentials')
    op.drop_index(op.f('ix_api_keys_key'), table_name='api_keys')
    op.drop_table('api_keys')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_permissions_name'), table_name='permissions')
    op.drop_table('permissions')
    op.drop_table('oauth2_tokens')
    op.drop_table('oauth2_authorization_codes')
    op.drop_index(op.f('ix_models_name'), table_name='models')
    op.drop_table('models')
    # ### end Alembic commands ###
